// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "tender/internal/models"

	uuid "github.com/google/uuid"
)

// Tender is an autogenerated mock type for the Tender type
type Tender struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, limit, offset, services
func (_m *Tender) All(ctx context.Context, limit int32, offset int32, services []models.ServiceType) ([]models.TenderOut, error) {
	ret := _m.Called(ctx, limit, offset, services)

	if len(ret) == 0 {
		panic("no return value specified for All")
	}

	var r0 []models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, []models.ServiceType) ([]models.TenderOut, error)); ok {
		return rf(ctx, limit, offset, services)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, []models.ServiceType) []models.TenderOut); ok {
		r0 = rf(ctx, limit, offset, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TenderOut)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, []models.ServiceType) error); ok {
		r1 = rf(ctx, limit, offset, services)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Edit provides a mock function with given fields: ctx, username, tenderId, patch
func (_m *Tender) Edit(ctx context.Context, username string, tenderId uuid.UUID, patch models.TenderPatch) (models.TenderOut, error) {
	ret := _m.Called(ctx, username, tenderId, patch)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, models.TenderPatch) (models.TenderOut, error)); ok {
		return rf(ctx, username, tenderId, patch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, models.TenderPatch) models.TenderOut); ok {
		r0 = rf(ctx, username, tenderId, patch)
	} else {
		r0 = ret.Get(0).(models.TenderOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, models.TenderPatch) error); ok {
		r1 = rf(ctx, username, tenderId, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// My provides a mock function with given fields: ctx, limit, offset, username
func (_m *Tender) My(ctx context.Context, limit int32, offset int32, username string) ([]models.TenderOut, error) {
	ret := _m.Called(ctx, limit, offset, username)

	if len(ret) == 0 {
		panic("no return value specified for My")
	}

	var r0 []models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) ([]models.TenderOut, error)); ok {
		return rf(ctx, limit, offset, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) []models.TenderOut); ok {
		r0 = rf(ctx, limit, offset, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TenderOut)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, string) error); ok {
		r1 = rf(ctx, limit, offset, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields: _a0, _a1
func (_m *Tender) New(_a0 context.Context, _a1 models.TenderNew) (models.TenderOut, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TenderNew) (models.TenderOut, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TenderNew) models.TenderOut); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.TenderOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TenderNew) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: ctx, username, tenderId, version
func (_m *Tender) Rollback(ctx context.Context, username string, tenderId uuid.UUID, version int32) (models.TenderOut, error) {
	ret := _m.Called(ctx, username, tenderId, version)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, int32) (models.TenderOut, error)); ok {
		return rf(ctx, username, tenderId, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, int32) models.TenderOut); ok {
		r0 = rf(ctx, username, tenderId, version)
	} else {
		r0 = ret.Get(0).(models.TenderOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, int32) error); ok {
		r1 = rf(ctx, username, tenderId, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: ctx, username, tenderId, status
func (_m *Tender) SetStatus(ctx context.Context, username string, tenderId uuid.UUID, status models.TenderStatus) (models.TenderOut, error) {
	ret := _m.Called(ctx, username, tenderId, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 models.TenderOut
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, models.TenderStatus) (models.TenderOut, error)); ok {
		return rf(ctx, username, tenderId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID, models.TenderStatus) models.TenderOut); ok {
		r0 = rf(ctx, username, tenderId, status)
	} else {
		r0 = ret.Get(0).(models.TenderOut)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID, models.TenderStatus) error); ok {
		r1 = rf(ctx, username, tenderId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: ctx, username, tenderId
func (_m *Tender) Status(ctx context.Context, username string, tenderId uuid.UUID) (models.TenderStatus, error) {
	ret := _m.Called(ctx, username, tenderId)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 models.TenderStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) (models.TenderStatus, error)); ok {
		return rf(ctx, username, tenderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uuid.UUID) models.TenderStatus); ok {
		r0 = rf(ctx, username, tenderId)
	} else {
		r0 = ret.Get(0).(models.TenderStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uuid.UUID) error); ok {
		r1 = rf(ctx, username, tenderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTender creates a new instance of Tender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTender(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tender {
	mock := &Tender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
