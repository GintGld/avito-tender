// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "tender/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BidStorage is an autogenerated mock type for the BidStorage type
type BidStorage struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *BidStorage) Begin(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Bid provides a mock function with given fields: ctx, bidId
func (_m *BidStorage) Bid(ctx context.Context, bidId uuid.UUID) (models.Bid, error) {
	ret := _m.Called(ctx, bidId)

	if len(ret) == 0 {
		panic("no return value specified for Bid")
	}

	var r0 models.Bid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Bid, error)); ok {
		return rf(ctx, bidId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Bid); ok {
		r0 = rf(ctx, bidId)
	} else {
		r0 = ret.Get(0).(models.Bid)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, bidId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BidSetStatus provides a mock function with given fields: ctx, bidId, status
func (_m *BidStorage) BidSetStatus(ctx context.Context, bidId uuid.UUID, status models.BidStatus) (models.Bid, error) {
	ret := _m.Called(ctx, bidId, status)

	if len(ret) == 0 {
		panic("no return value specified for BidSetStatus")
	}

	var r0 models.Bid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.BidStatus) (models.Bid, error)); ok {
		return rf(ctx, bidId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.BidStatus) models.Bid); ok {
		r0 = rf(ctx, bidId, status)
	} else {
		r0 = ret.Get(0).(models.Bid)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.BidStatus) error); ok {
		r1 = rf(ctx, bidId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: ctx
func (_m *BidStorage) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decisions provides a mock function with given fields: ctx, bidId
func (_m *BidStorage) Decisions(ctx context.Context, bidId uuid.UUID) ([]models.Decision, error) {
	ret := _m.Called(ctx, bidId)

	if len(ret) == 0 {
		panic("no return value specified for Decisions")
	}

	var r0 []models.Decision
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]models.Decision, error)); ok {
		return rf(ctx, bidId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []models.Decision); ok {
		r0 = rf(ctx, bidId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Decision)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, bidId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBid provides a mock function with given fields: ctx, _a1
func (_m *BidStorage) InsertBid(ctx context.Context, _a1 models.Bid) (models.Bid, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertBid")
	}

	var r0 models.Bid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Bid) (models.Bid, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Bid) models.Bid); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Bid)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Bid) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDecision provides a mock function with given fields: ctx, decision
func (_m *BidStorage) InsertDecision(ctx context.Context, decision models.Decision) error {
	ret := _m.Called(ctx, decision)

	if len(ret) == 0 {
		panic("no return value specified for InsertDecision")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Decision) error); ok {
		r0 = rf(ctx, decision)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertReview provides a mock function with given fields: ctx, review
func (_m *BidStorage) InsertReview(ctx context.Context, review models.Review) (uuid.UUID, error) {
	ret := _m.Called(ctx, review)

	if len(ret) == 0 {
		panic("no return value specified for InsertReview")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) (uuid.UUID, error)); ok {
		return rf(ctx, review)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Review) uuid.UUID); ok {
		r0 = rf(ctx, review)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Review) error); ok {
		r1 = rf(ctx, review)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reviews provides a mock function with given fields: ctx, tenderId, author, limit, offset
func (_m *BidStorage) Reviews(ctx context.Context, tenderId uuid.UUID, author string, limit int32, offset int32) ([]models.Review, error) {
	ret := _m.Called(ctx, tenderId, author, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for Reviews")
	}

	var r0 []models.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32, int32) ([]models.Review, error)); ok {
		return rf(ctx, tenderId, author, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int32, int32) []models.Review); ok {
		r0 = rf(ctx, tenderId, author, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int32, int32) error); ok {
		r1 = rf(ctx, tenderId, author, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: ctx
func (_m *BidStorage) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TenderBids provides a mock function with given fields: ctx, tenderId, limit, offset
func (_m *BidStorage) TenderBids(ctx context.Context, tenderId uuid.UUID, limit int32, offset int32) ([]models.Bid, error) {
	ret := _m.Called(ctx, tenderId, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for TenderBids")
	}

	var r0 []models.Bid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) ([]models.Bid, error)); ok {
		return rf(ctx, tenderId, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, int32) []models.Bid); ok {
		r0 = rf(ctx, tenderId, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, int32) error); ok {
		r1 = rf(ctx, tenderId, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBid provides a mock function with given fields: ctx, _a1
func (_m *BidStorage) UpdateBid(ctx context.Context, _a1 models.Bid) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBid")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Bid) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserBids provides a mock function with given fields: ctx, username, limit, offset
func (_m *BidStorage) UserBids(ctx context.Context, username string, limit int32, offset int32) ([]models.Bid, error) {
	ret := _m.Called(ctx, username, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for UserBids")
	}

	var r0 []models.Bid
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) ([]models.Bid, error)); ok {
		return rf(ctx, username, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int32, int32) []models.Bid); ok {
		r0 = rf(ctx, username, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Bid)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int32, int32) error); ok {
		r1 = rf(ctx, username, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBidStorage creates a new instance of BidStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBidStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *BidStorage {
	mock := &BidStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
