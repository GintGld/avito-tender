// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "tender/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RollbackService is an autogenerated mock type for the RollbackService type
type RollbackService struct {
	mock.Mock
}

// SaveTender provides a mock function with given fields: ctx, _a1
func (_m *RollbackService) SaveTender(ctx context.Context, _a1 models.Tender) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SaveTender")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tender) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SwapTender provides a mock function with given fields: ctx, tenderId, version, outdatedTedner
func (_m *RollbackService) SwapTender(ctx context.Context, tenderId uuid.UUID, version int32, outdatedTedner models.Tender) (models.Tender, error) {
	ret := _m.Called(ctx, tenderId, version, outdatedTedner)

	if len(ret) == 0 {
		panic("no return value specified for SwapTender")
	}

	var r0 models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, models.Tender) (models.Tender, error)); ok {
		return rf(ctx, tenderId, version, outdatedTedner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int32, models.Tender) models.Tender); ok {
		r0 = rf(ctx, tenderId, version, outdatedTedner)
	} else {
		r0 = ret.Get(0).(models.Tender)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int32, models.Tender) error); ok {
		r1 = rf(ctx, tenderId, version, outdatedTedner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRollbackService creates a new instance of RollbackService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRollbackService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RollbackService {
	mock := &RollbackService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
