// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "tender/internal/models"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TenderStorage is an autogenerated mock type for the TenderStorage type
type TenderStorage struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx
func (_m *TenderStorage) Begin(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Commit provides a mock function with given fields: ctx
func (_m *TenderStorage) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTender provides a mock function with given fields: ctx, _a1
func (_m *TenderStorage) InsertTender(ctx context.Context, _a1 models.Tender) (models.Tender, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertTender")
	}

	var r0 models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tender) (models.Tender, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Tender) models.Tender); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(models.Tender)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Tender) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: ctx
func (_m *TenderStorage) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tender provides a mock function with given fields: ctx, id
func (_m *TenderStorage) Tender(ctx context.Context, id uuid.UUID) (models.Tender, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Tender")
	}

	var r0 models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.Tender, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.Tender); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Tender)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TenderSetStatus provides a mock function with given fields: ctx, tenderId, status
func (_m *TenderStorage) TenderSetStatus(ctx context.Context, tenderId uuid.UUID, status models.TenderStatus) (models.Tender, error) {
	ret := _m.Called(ctx, tenderId, status)

	if len(ret) == 0 {
		panic("no return value specified for TenderSetStatus")
	}

	var r0 models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.TenderStatus) (models.Tender, error)); ok {
		return rf(ctx, tenderId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.TenderStatus) models.Tender); ok {
		r0 = rf(ctx, tenderId, status)
	} else {
		r0 = ret.Get(0).(models.Tender)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, models.TenderStatus) error); ok {
		r1 = rf(ctx, tenderId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TenderStatus provides a mock function with given fields: ctx, tenderId
func (_m *TenderStorage) TenderStatus(ctx context.Context, tenderId uuid.UUID) (models.TenderStatus, error) {
	ret := _m.Called(ctx, tenderId)

	if len(ret) == 0 {
		panic("no return value specified for TenderStatus")
	}

	var r0 models.TenderStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (models.TenderStatus, error)); ok {
		return rf(ctx, tenderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) models.TenderStatus); ok {
		r0 = rf(ctx, tenderId)
	} else {
		r0 = ret.Get(0).(models.TenderStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, tenderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tenders provides a mock function with given fields: ctx, limit, offset, services
func (_m *TenderStorage) Tenders(ctx context.Context, limit int32, offset int32, services []models.ServiceType) ([]models.Tender, error) {
	ret := _m.Called(ctx, limit, offset, services)

	if len(ret) == 0 {
		panic("no return value specified for Tenders")
	}

	var r0 []models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, []models.ServiceType) ([]models.Tender, error)); ok {
		return rf(ctx, limit, offset, services)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, []models.ServiceType) []models.Tender); ok {
		r0 = rf(ctx, limit, offset, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, []models.ServiceType) error); ok {
		r1 = rf(ctx, limit, offset, services)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTender provides a mock function with given fields: ctx, _a1
func (_m *TenderStorage) UpdateTender(ctx context.Context, _a1 models.Tender) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTender")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Tender) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTenders provides a mock function with given fields: ctx, limit, offset, username
func (_m *TenderStorage) UserTenders(ctx context.Context, limit int32, offset int32, username string) ([]models.Tender, error) {
	ret := _m.Called(ctx, limit, offset, username)

	if len(ret) == 0 {
		panic("no return value specified for UserTenders")
	}

	var r0 []models.Tender
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) ([]models.Tender, error)); ok {
		return rf(ctx, limit, offset, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, string) []models.Tender); ok {
		r0 = rf(ctx, limit, offset, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Tender)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, string) error); ok {
		r1 = rf(ctx, limit, offset, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenderStorage creates a new instance of TenderStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenderStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenderStorage {
	mock := &TenderStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
